#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...
#alias ls='ls --color=auto'
alias ll='ls -lF'
alias la='ls -A'
alias l='ls -CF'

alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

# Debian/Ubuntu

alias acs='apt-cache search'
alias afs='apt-file search --regexp'

# These are apt-get only
alias ags='apt-get source'
alias acp='apt-cache policy'

# superuser operations
alias afu='sudo apt-file update'
alias ppap='sudo ppa-purge'
alias ag='sudo apt-get'
alias aga='sudo apt-get autoclean'
alias agar='sudo apt-get autoremove'
alias agb='sudo apt-get build-dep'
alias agc='sudo apt-get clean'
alias agd='sudo apt-get dselect-upgrade'
alias agi='sudo apt-get install'
alias agp='sudo apt-get purge'
alias agr='sudo apt-get remove'
alias agu='sudo apt-get update'
alias agud='sudo apt-get update && sudo apt-get dist-upgrade'
alias agug='sudo apt-get upgrade'
alias aguu='sudo apt-get update && sudo apt-get upgrade'
alias agar='sudo apt-get autoremove'

# Docker
alias docker-rm-all-containers='docker rm $(docker ps -a -q)'
alias docker-stop-all-containers='docker stop $(docker ps -q)'
alias docker-kill-all-containers='docker kill $(docker ps -q)'
alias docker-rm-all-images='docker rmi $(docker images -q)'
alias docker-rm-all-volumes='docker volume rm $(docker volume ls -qf dangling=true)'
alias docker-update-images='docker images | grep -v REPO | awk "{print \$1 \":\" \$2}" | xargs --no-run-if-empty -L1 docker pull'
alias docker-clean-images='docker rmi $(docker images -q -f dangling=true'
alias dc='docker-compose'

# Glances
alias glances='docker run --rm -v /var/run/docker.sock:/var/run/docker.sock:ro --pid host --name Glances -it docker.io/nicolargo/glances'
#alias glances='docker start -ia Glances'

# Android
export PATH=${PATH}:/home/kent/android-studio/sdk/tools
export PATH=${PATH}:/home/kent/android-studio/sdk/platform-tools

# Go
export GOPATH=~/Development/Go

# Miscellanous
alias meteo='curl wttr.in/'

alias c='clear'

function mcd() {
  mkdir -p "$1" && cd "$1";
}

function ssh_tmux() { ssh -t "$1" tmux a || ssh -t "$1" tmux; }

[[ -f ~/.bash_profile ]] && source ~/.bash_profile
eval "$(pyenv init -)"

export PATH="$HOME/.jenv/bin:$PATH"
eval "$(jenv init -)"

# Git
git_fwd() {
  git checkout $(git rev-list --topo-order HEAD.."$*" | tail -1)
}
alias git_bwd="git checkout HEAD~"

export PATH="$(brew --prefix coreutils)/libexec/gnubin:/usr/local/bin:$PATH"


#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="/Users/quentinl/.sdkman"
[[ -s "/Users/quentinl/.sdkman/bin/sdkman-init.sh" ]] && source "/Users/quentinl/.sdkman/bin/sdkman-init.sh"

export PATH=$HOME/bin:$PATH

mvn-or-mvnw () {
  if [ -x ./mvnw ]
  then
    echo "executing mvnw instead of mvn"
    ./mvnw "$@"
  else
    mvn "$@"
  fi
}
alias mvn='mvn-or-mvnw'

# added by travis gem
[ -f /Users/quentinl/.travis/travis.sh ] && source /Users/quentinl/.travis/travis.sh

export PIPELINE_REPO_DIR=/Users/quentinl/projects/pipeline

aws_assume_role() {
#  CREDS=$(aws sts assume-role --role-arn arn:aws:iam::042786531511:role/EngineeringAccess --role-session-name test --serial-number arn:aws:iam::071790713882:mfa/quentinl --token-code $1 --output text | grep CREDENTIALS |  tr -s ' ')
#
#  if [ "$?" -ne "0" ]; then
#    echo -e "Failed while calling aws sts assume-role"
#  else
#    credentials=($CREDS)
#    echo -e  "Setting temporary credentials ${credentials[1]} valid until ${credentials[2]}"
#    export AWS_ACCESS_KEY_ID="${credentials[1]}"
#    export AWS_SECRET_ACCESS_KEY="${credentials[3]}"
#    export AWS_SESSION_TOKEN="${credentials[4]}"
#  fi

  aws sts assume-role --role-arn arn:aws:iam::042786531511:role/EngineeringAccess --role-session-name "DevAccount" --serial-number arn:aws:iam::071790713882:mfa/quentinl --token-code $1 | \
  jq -r  '.Credentials | @sh "export AWS_SESSION_TOKEN=\(.SessionToken)\nexport AWS_ACCESS_KEY_ID=\(.AccessKeyId)\nexport AWS_SECRET_ACCESS_KEY=\(.SecretAccessKey) "'

}

alias UNSET_AWS=$'source <(env | awk -F= \' /AWS/ {print "unset ", $1} \')'
alias ecr-login='aws ecr get-login --no-include-email --region eu-west-1'
